generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["nativeDistinct"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  PROVIDER
}

model City {
  id               String            @id @default(cuid())
  name             String
  slug             String            @unique
  providerProfiles ProviderProfile[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@index([name])
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  phone           String?          @unique
  passwordHash    String
  role            Role
  providerProfile ProviderProfile?
  customerProfile CustomerProfile?
  authoredServices ServiceTemplate[] @relation("AuthoredServices") // <-- Связь для Автора
  chatMessages    ChatMessage[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([role])
}

model ProviderProfile {
  id               String            @id @default(cuid())
  userId           String            @unique
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  displayName      String
  description      String?
  cityId           String?
  city             City?             @relation(fields: [cityId], references: [id], onDelete: SetNull)
  homeLocation     Unsupported("point")?
  prices           Price[]
  keptServices     ServiceTemplate[] @relation("KeptServices") // <-- Связь для Хранителя
  orderItems       OrderItem[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@index([cityId])
}

model CustomerProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullName          String
  preferredLanguage String?  @default("ru")
  orders            Order[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Category {
  id               String            @id @default(cuid())
  name             String            @unique
  slug             String            @unique // <-- ИСПРАВЛЕНО: Добавлено поле slug
  description      String?
  serviceTemplates ServiceTemplate[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model ServiceTemplate {
  id          String                 @id @default(cuid())
  categoryId  String
  name        String
  slug        String                 // <-- ИСПРАВЛЕНО: Добавлено поле slug
  description String?
  
  // ИСПРАВЛЕНО: Автор - это User, может быть null
  authorId    String?
  author      User?                  @relation("AuthoredServices", fields: [authorId], references: [id], onDelete: SetNull)

  // ИСПРАВЛЕНО: Хранитель - это ProviderProfile, может быть null
  keeperId    String?
  keeper      ProviderProfile?       @relation("KeptServices", fields: [keeperId], references: [id], onDelete: SetNull)

  category    Category               @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  versions    ServiceTemplateVersion[]
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  @@unique([categoryId, name])
  @@unique([categoryId, slug]) // <-- ИСПРАВЛЕНО: Добавлен уникальный индекс
  @@index([categoryId])
  @@index([authorId])
  @@index([keeperId])
}

model ServiceTemplateVersion {
  id                String          @id @default(cuid())
  serviceTemplateId String
  versionNumber     Int
  title             String
  description       String?
  isActive          Boolean         @default(true)
  serviceTemplate   ServiceTemplate @relation(fields: [serviceTemplateId], references: [id], onDelete: Cascade)
  prices            Price[]
  orderItems        OrderItem[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@unique([serviceTemplateId, versionNumber])
  @@index([serviceTemplateId, isActive])
}

model Price {
  id                       String                 @id @default(cuid())
  providerProfileId        String
  serviceTemplateVersionId String
  price                    Decimal                @db.Decimal(10, 2)
  providerProfile          ProviderProfile        @relation(fields: [providerProfileId], references: [id], onDelete: Cascade)
  serviceTemplateVersion   ServiceTemplateVersion @relation(fields: [serviceTemplateVersionId], references: [id], onDelete: Cascade)
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt

  @@unique([providerProfileId, serviceTemplateVersionId])
  @@index([serviceTemplateVersionId])
}

model Order {
  id                String          @id @default(cuid())
  customerProfileId String
  customerProfile   CustomerProfile @relation(fields: [customerProfileId], references: [id], onDelete: Cascade)
  items             OrderItem[]
  messages          ChatMessage[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([customerProfileId])
}

model OrderItem {
  id                       String                 @id @default(cuid())
  orderId                  String
  order                    Order                  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  providerProfileId        String
  providerProfile          ProviderProfile        @relation(fields: [providerProfileId], references: [id], onDelete: Cascade)
  serviceTemplateVersionId String
  serviceTemplateVersion   ServiceTemplateVersion @relation(fields: [serviceTemplateVersionId], references: [id], onDelete: Cascade)
  price                    Decimal                @db.Decimal(10, 2)
  quantity                 Int
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt

  @@index([orderId])
  @@index([providerProfileId])
  @@index([serviceTemplateVersionId])
}

model ChatMessage {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  text      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([senderId])
}
