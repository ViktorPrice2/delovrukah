generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  PROVIDER
}

model User {
  id              String            @id @default(cuid())
  email           String            @unique
  phone           String?           @unique
  passwordHash    String
  role            Role
  providerProfile ProviderProfile?
  customerProfile CustomerProfile?
  authoredServiceTemplates ServiceTemplate[] @relation("ServiceTemplateAuthor")
  keptServiceTemplates     ServiceTemplate[] @relation("ServiceTemplateKeeper")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([role])
}

model ProviderProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  displayName String
  description String?
  hourlyRate  Decimal?  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CustomerProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullName          String
  preferredLanguage String?  @default("ru")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Category {
  id               String            @id @default(cuid())
  name             String            @unique
  description      String?
  serviceTemplates ServiceTemplate[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model ServiceTemplate {
  id          String                    @id @default(cuid())
  categoryId  String
  name        String
  description String?
  authorId    String
  keeperId    String
  category    Category                  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  author      User                      @relation("ServiceTemplateAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  keeper      User                      @relation("ServiceTemplateKeeper", fields: [keeperId], references: [id], onDelete: Cascade)
  versions    ServiceTemplateVersion[]
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt

  @@index([categoryId])
  @@index([authorId])
  @@index([keeperId])
  @@unique([categoryId, name])
}

model ServiceTemplateVersion {
  id                String          @id @default(cuid())
  serviceTemplateId String
  versionNumber     Int
  title             String
  description       String?
  isActive          Boolean         @default(true)
  serviceTemplate   ServiceTemplate @relation(fields: [serviceTemplateId], references: [id], onDelete: Cascade)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@unique([serviceTemplateId, versionNumber])
  @@index([serviceTemplateId, isActive])
}
